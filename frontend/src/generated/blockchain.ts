// Generated by @wagmi/cli@0.1.5 on 2/4/2023 at 8:38:07 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi';
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Bank
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const bankABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'mintAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createToken',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tokens',
    outputs: [{ name: '', internalType: 'contract MintableToken', type: 'address' }],
  },
] as const;

/**
 *
 */
export const bankAddress = {
  31337: '0x2C37171FdA079C7E79DefEf3B0A2E0C5BF182b4A',
} as const;

/**
 *
 */
export const bankConfig = { address: bankAddress, abi: bankABI } as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MintableToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mintableTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SanSwapFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const sanSwapFactoryABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'allPools',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token1', internalType: 'address', type: 'address' },
      { name: 'token2', internalType: 'address', type: 'address' },
      { name: 'token3', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [{ name: 'poolAddress', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPoolCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'pool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const;

/**
 *
 */
export const sanSwapFactoryAddress = {
  31337: '0xD7ca2476Ae959e6bcA56Db9e472bD435B4E10Fad',
} as const;

/**
 *
 */
export const sanSwapFactoryConfig = {
  address: sanSwapFactoryAddress,
  abi: sanSwapFactoryABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SanSwapPool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sanSwapPoolABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: '_tokenA', internalType: 'address', type: 'address' },
      { name: '_tokenB', internalType: 'address', type: 'address' },
      { name: '_tokenC', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amountA', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amountB', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amountC', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amountA', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amountB', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amountC', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'amountAIn', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amountBIn', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amountCIn', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amountAOut', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amountBOut', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'amountCOut', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'burn',
    outputs: [
      { name: 'amountA', internalType: 'uint256', type: 'uint256' },
      { name: 'amountB', internalType: 'uint256', type: 'uint256' },
      { name: 'amountC', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'mint',
    outputs: [{ name: 'liquidity', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserveA',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserveB',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserveC',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserves',
    outputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: '', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amountAOut', internalType: 'uint256', type: 'uint256' },
      { name: 'amountBOut', internalType: 'uint256', type: 'uint256' },
      { name: 'amountCOut', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenA',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenB',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenC',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SanSwapRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const sanSwapRouterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_factory', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'token1', internalType: 'address', type: 'address' },
      { name: 'token2', internalType: 'address', type: 'address' },
      { name: 'token3', internalType: 'address', type: 'address' },
      { name: 'amountDesired1', internalType: 'uint256', type: 'uint256' },
      { name: 'amountDesired2', internalType: 'uint256', type: 'uint256' },
      { name: 'amountDesired3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addLiquidity',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'contract SanSwapFactory', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'tokenOut', internalType: 'address', type: 'address' },
      { name: 'tokenLast', internalType: 'address', type: 'address' },
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getOneForOneAmountOut',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'tokenOut1', internalType: 'address', type: 'address' },
      { name: 'tokenOut2', internalType: 'address', type: 'address' },
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getOneForTwoAmountOut',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenIn1', internalType: 'address', type: 'address' },
      { name: 'tokenIn2', internalType: 'address', type: 'address' },
      { name: 'tokenOut', internalType: 'address', type: 'address' },
      { name: 'amountIn1', internalType: 'uint256', type: 'uint256' },
      { name: 'amountIn2', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTwoForOneAmountOut',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'poolAddress', internalType: 'address', type: 'address' },
      { name: 'poolTokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeLiquidity',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'token1', internalType: 'address', type: 'address' },
      { name: 'token2', internalType: 'address', type: 'address' },
      { name: 'token3', internalType: 'address', type: 'address' },
      { name: 'amountIn1', internalType: 'uint256', type: 'uint256' },
      { name: 'amountIn2', internalType: 'uint256', type: 'uint256' },
      { name: 'amountIn3', internalType: 'uint256', type: 'uint256' },
      { name: 'amountOut1', internalType: 'uint256', type: 'uint256' },
      { name: 'amountOut2', internalType: 'uint256', type: 'uint256' },
      { name: 'amountOut3', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'tokenOut', internalType: 'address', type: 'address' },
      { name: 'tokenLast', internalType: 'address', type: 'address' },
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapOneForOne',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'tokenOut1', internalType: 'address', type: 'address' },
      { name: 'tokenOut2', internalType: 'address', type: 'address' },
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapOneForTwo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenIn1', internalType: 'address', type: 'address' },
      { name: 'tokenIn2', internalType: 'address', type: 'address' },
      { name: 'tokenOut', internalType: 'address', type: 'address' },
      { name: 'amountIn1', internalType: 'uint256', type: 'uint256' },
      { name: 'amountIn2', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapTwoForOne',
    outputs: [],
  },
] as const;

/**
 *
 */
export const sanSwapRouterAddress = {
  31337: '0x69Bf3b46c6a1cB85f9406B32CbFDab5C4C671D44',
} as const;

/**
 *
 */
export const sanSwapRouterConfig = {
  address: sanSwapRouterAddress,
  abi: sanSwapRouterABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link bankABI}__.
 *
 *
 */
export function useBank(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof bankAddress;
  } = {} as any
) {
  return useContract({ abi: bankABI, address: bankAddress[31337], ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bankABI}__.
 *
 *
 */
export function useBankRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof bankABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof bankAddress;
  } = {} as any
) {
  return useContractRead({
    abi: bankABI,
    address: bankAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof bankABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"tokenSize"`.
 *
 *
 */
export function useBankTokenSize(
  config: Omit<
    UseContractReadConfig<typeof bankABI, 'tokenSize'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any
) {
  return useContractRead({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'tokenSize',
    ...config,
  } as UseContractReadConfig<typeof bankABI, 'tokenSize'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"tokens"`.
 *
 *
 */
export function useBankTokens(
  config: Omit<
    UseContractReadConfig<typeof bankABI, 'tokens'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any
) {
  return useContractRead({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'tokens',
    ...config,
  } as UseContractReadConfig<typeof bankABI, 'tokens'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bankABI}__.
 *
 *
 */
export function useBankWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof bankAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bankABI, string>['abi'],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof bankABI, TFunctionName> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<TMode, typeof bankABI, TFunctionName>({
    abi: bankABI,
    address: bankAddress[31337],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"createToken"`.
 *
 *
 */
export function useBankCreateToken<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof bankAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bankABI, 'createToken'>['abi'],
        'createToken'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'createToken' }
    : UseContractWriteConfig<TMode, typeof bankABI, 'createToken'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'createToken';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bankABI, 'createToken'>({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'createToken',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"mintAll"`.
 *
 *
 */
export function useBankMintAll<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof bankAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof bankABI, 'mintAll'>['abi'],
        'mintAll'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'mintAll' }
    : UseContractWriteConfig<TMode, typeof bankABI, 'mintAll'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'mintAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof bankABI, 'mintAll'>({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'mintAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bankABI}__.
 *
 *
 */
export function usePrepareBankWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof bankABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof bankAddress;
  } = {} as any
) {
  return usePrepareContractWrite({
    abi: bankABI,
    address: bankAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof bankABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"createToken"`.
 *
 *
 */
export function usePrepareBankCreateToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bankABI, 'createToken'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'createToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bankABI, 'createToken'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"mintAll"`.
 *
 *
 */
export function usePrepareBankMintAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bankABI, 'mintAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'mintAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bankABI, 'mintAll'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mintableTokenABI}__.
 */
export function useMintableToken(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: mintableTokenABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableTokenABI}__.
 */
export function useMintableTokenRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof mintableTokenABI, TFunctionName>, 'abi'> = {} as any
) {
  return useContractRead({ abi: mintableTokenABI, ...config } as UseContractReadConfig<
    typeof mintableTokenABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useMintableTokenAllowance(
  config: Omit<
    UseContractReadConfig<typeof mintableTokenABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mintableTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof mintableTokenABI, 'allowance'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMintableTokenBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof mintableTokenABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mintableTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof mintableTokenABI, 'balanceOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useMintableTokenDecimals(
  config: Omit<
    UseContractReadConfig<typeof mintableTokenABI, 'decimals'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mintableTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof mintableTokenABI, 'decimals'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"name"`.
 */
export function useMintableTokenName(
  config: Omit<
    UseContractReadConfig<typeof mintableTokenABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mintableTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof mintableTokenABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"owner"`.
 */
export function useMintableTokenOwner(
  config: Omit<
    UseContractReadConfig<typeof mintableTokenABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mintableTokenABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof mintableTokenABI, 'owner'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useMintableTokenSymbol(
  config: Omit<
    UseContractReadConfig<typeof mintableTokenABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mintableTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof mintableTokenABI, 'symbol'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMintableTokenTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof mintableTokenABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: mintableTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof mintableTokenABI, 'totalSupply'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableTokenABI}__.
 */
export function useMintableTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mintableTokenABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof mintableTokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableTokenABI, TFunctionName>({
    abi: mintableTokenABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useMintableTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mintableTokenABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof mintableTokenABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableTokenABI, 'approve'>({
    abi: mintableTokenABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMintableTokenDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mintableTokenABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof mintableTokenABI, 'decreaseAllowance'> & {
        abi?: never;
        functionName?: 'decreaseAllowance';
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableTokenABI, 'decreaseAllowance'>({
    abi: mintableTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMintableTokenIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mintableTokenABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof mintableTokenABI, 'increaseAllowance'> & {
        abi?: never;
        functionName?: 'increaseAllowance';
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableTokenABI, 'increaseAllowance'>({
    abi: mintableTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useMintableTokenMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mintableTokenABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof mintableTokenABI, 'mint'> & {
        abi?: never;
        functionName?: 'mint';
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableTokenABI, 'mint'>({
    abi: mintableTokenABI,
    functionName: 'mint',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useMintableTokenRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mintableTokenABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof mintableTokenABI, 'renounceOwnership'> & {
        abi?: never;
        functionName?: 'renounceOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableTokenABI, 'renounceOwnership'>({
    abi: mintableTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useMintableTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mintableTokenABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof mintableTokenABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableTokenABI, 'transfer'>({
    abi: mintableTokenABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMintableTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mintableTokenABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof mintableTokenABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableTokenABI, 'transferFrom'>({
    abi: mintableTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useMintableTokenTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mintableTokenABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof mintableTokenABI, 'transferOwnership'> & {
        abi?: never;
        functionName?: 'transferOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof mintableTokenABI, 'transferOwnership'>({
    abi: mintableTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableTokenABI}__.
 */
export function usePrepareMintableTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mintableTokenABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mintableTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mintableTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMintableTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mintableTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mintableTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mintableTokenABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMintableTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mintableTokenABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mintableTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mintableTokenABI, 'decreaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMintableTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mintableTokenABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mintableTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mintableTokenABI, 'increaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMintableTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mintableTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mintableTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mintableTokenABI, 'mint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareMintableTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mintableTokenABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mintableTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mintableTokenABI, 'renounceOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMintableTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mintableTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mintableTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mintableTokenABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMintableTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mintableTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mintableTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mintableTokenABI, 'transferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mintableTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareMintableTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mintableTokenABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: mintableTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mintableTokenABI, 'transferOwnership'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mintableTokenABI}__.
 */
export function useMintableTokenEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof mintableTokenABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: mintableTokenABI, ...config } as UseContractEventConfig<
    typeof mintableTokenABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mintableTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useMintableTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mintableTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mintableTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof mintableTokenABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mintableTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useMintableTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof mintableTokenABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mintableTokenABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof mintableTokenABI, 'OwnershipTransferred'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mintableTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMintableTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mintableTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: mintableTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof mintableTokenABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sanSwapFactoryABI}__.
 *
 *
 */
export function useSanSwapFactory(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof sanSwapFactoryAddress;
  } = {} as any
) {
  return useContract({ abi: sanSwapFactoryABI, address: sanSwapFactoryAddress[31337], ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapFactoryABI}__.
 *
 *
 */
export function useSanSwapFactoryRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof sanSwapFactoryABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof sanSwapFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: sanSwapFactoryABI,
    address: sanSwapFactoryAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof sanSwapFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapFactoryABI}__ and `functionName` set to `"allPools"`.
 *
 *
 */
export function useSanSwapFactoryAllPools(
  config: Omit<
    UseContractReadConfig<typeof sanSwapFactoryABI, 'allPools'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: sanSwapFactoryABI,
    address: sanSwapFactoryAddress[31337],
    functionName: 'allPools',
    ...config,
  } as UseContractReadConfig<typeof sanSwapFactoryABI, 'allPools'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapFactoryABI}__ and `functionName` set to `"getPoolCount"`.
 *
 *
 */
export function useSanSwapFactoryGetPoolCount(
  config: Omit<
    UseContractReadConfig<typeof sanSwapFactoryABI, 'getPoolCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: sanSwapFactoryABI,
    address: sanSwapFactoryAddress[31337],
    functionName: 'getPoolCount',
    ...config,
  } as UseContractReadConfig<typeof sanSwapFactoryABI, 'getPoolCount'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapFactoryABI}__ and `functionName` set to `"pool"`.
 *
 *
 */
export function useSanSwapFactoryPool(
  config: Omit<
    UseContractReadConfig<typeof sanSwapFactoryABI, 'pool'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapFactoryAddress } = {} as any
) {
  return useContractRead({
    abi: sanSwapFactoryABI,
    address: sanSwapFactoryAddress[31337],
    functionName: 'pool',
    ...config,
  } as UseContractReadConfig<typeof sanSwapFactoryABI, 'pool'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapFactoryABI}__.
 *
 *
 */
export function useSanSwapFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof sanSwapFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapFactoryABI, string>['abi'],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof sanSwapFactoryABI, TFunctionName> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapFactoryABI, TFunctionName>({
    abi: sanSwapFactoryABI,
    address: sanSwapFactoryAddress[31337],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapFactoryABI}__ and `functionName` set to `"createPool"`.
 *
 *
 */
export function useSanSwapFactoryCreatePool<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof sanSwapFactoryAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapFactoryABI, 'createPool'>['abi'],
        'createPool'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'createPool' }
    : UseContractWriteConfig<TMode, typeof sanSwapFactoryABI, 'createPool'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'createPool';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapFactoryABI, 'createPool'>({
    abi: sanSwapFactoryABI,
    address: sanSwapFactoryAddress[31337],
    functionName: 'createPool',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapFactoryABI}__.
 *
 *
 */
export function usePrepareSanSwapFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapFactoryABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof sanSwapFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapFactoryABI,
    address: sanSwapFactoryAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapFactoryABI}__ and `functionName` set to `"createPool"`.
 *
 *
 */
export function usePrepareSanSwapFactoryCreatePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapFactoryABI, 'createPool'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapFactoryAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapFactoryABI,
    address: sanSwapFactoryAddress[31337],
    functionName: 'createPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapFactoryABI, 'createPool'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sanSwapPoolABI}__.
 */
export function useSanSwapPool(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: sanSwapPoolABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__.
 */
export function useSanSwapPoolRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof sanSwapPoolABI, TFunctionName>, 'abi'> = {} as any
) {
  return useContractRead({ abi: sanSwapPoolABI, ...config } as UseContractReadConfig<
    typeof sanSwapPoolABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"allowance"`.
 */
export function useSanSwapPoolAllowance(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'allowance'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSanSwapPoolBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'balanceOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"decimals"`.
 */
export function useSanSwapPoolDecimals(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'decimals'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'decimals'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"name"`.
 */
export function useSanSwapPoolName(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"reserveA"`.
 */
export function useSanSwapPoolReserveA(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'reserveA'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'reserveA',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'reserveA'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"reserveB"`.
 */
export function useSanSwapPoolReserveB(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'reserveB'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'reserveB',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'reserveB'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"reserveC"`.
 */
export function useSanSwapPoolReserveC(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'reserveC'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'reserveC',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'reserveC'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"reserves"`.
 */
export function useSanSwapPoolReserves(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'reserves'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'reserves',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'reserves'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"symbol"`.
 */
export function useSanSwapPoolSymbol(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'symbol'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"tokenA"`.
 */
export function useSanSwapPoolTokenA(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'tokenA'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'tokenA',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'tokenA'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"tokenB"`.
 */
export function useSanSwapPoolTokenB(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'tokenB'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'tokenB',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'tokenB'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"tokenC"`.
 */
export function useSanSwapPoolTokenC(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'tokenC'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'tokenC',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'tokenC'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useSanSwapPoolTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof sanSwapPoolABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sanSwapPoolABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof sanSwapPoolABI, 'totalSupply'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__.
 */
export function useSanSwapPoolWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapPoolABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof sanSwapPoolABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapPoolABI, TFunctionName>({
    abi: sanSwapPoolABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"approve"`.
 */
export function useSanSwapPoolApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapPoolABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof sanSwapPoolABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapPoolABI, 'approve'>({
    abi: sanSwapPoolABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"burn"`.
 */
export function useSanSwapPoolBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapPoolABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof sanSwapPoolABI, 'burn'> & {
        abi?: never;
        functionName?: 'burn';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapPoolABI, 'burn'>({
    abi: sanSwapPoolABI,
    functionName: 'burn',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useSanSwapPoolDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapPoolABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof sanSwapPoolABI, 'decreaseAllowance'> & {
        abi?: never;
        functionName?: 'decreaseAllowance';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapPoolABI, 'decreaseAllowance'>({
    abi: sanSwapPoolABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useSanSwapPoolIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapPoolABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof sanSwapPoolABI, 'increaseAllowance'> & {
        abi?: never;
        functionName?: 'increaseAllowance';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapPoolABI, 'increaseAllowance'>({
    abi: sanSwapPoolABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"mint"`.
 */
export function useSanSwapPoolMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapPoolABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof sanSwapPoolABI, 'mint'> & {
        abi?: never;
        functionName?: 'mint';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapPoolABI, 'mint'>({
    abi: sanSwapPoolABI,
    functionName: 'mint',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"swap"`.
 */
export function useSanSwapPoolSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapPoolABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof sanSwapPoolABI, 'swap'> & {
        abi?: never;
        functionName?: 'swap';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapPoolABI, 'swap'>({
    abi: sanSwapPoolABI,
    functionName: 'swap',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"transfer"`.
 */
export function useSanSwapPoolTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapPoolABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof sanSwapPoolABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapPoolABI, 'transfer'>({
    abi: sanSwapPoolABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useSanSwapPoolTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapPoolABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof sanSwapPoolABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapPoolABI, 'transferFrom'>({
    abi: sanSwapPoolABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__.
 */
export function usePrepareSanSwapPoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapPoolABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapPoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapPoolABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareSanSwapPoolApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapPoolABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareSanSwapPoolBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapPoolABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'burn'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareSanSwapPoolDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapPoolABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'decreaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareSanSwapPoolIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapPoolABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'increaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareSanSwapPoolMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapPoolABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'mint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareSanSwapPoolSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapPoolABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'swap'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareSanSwapPoolTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapPoolABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapPoolABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareSanSwapPoolTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapPoolABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapPoolABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sanSwapPoolABI}__.
 */
export function useSanSwapPoolEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof sanSwapPoolABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: sanSwapPoolABI, ...config } as UseContractEventConfig<
    typeof sanSwapPoolABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sanSwapPoolABI}__ and `eventName` set to `"Approval"`.
 */
export function useSanSwapPoolApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof sanSwapPoolABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sanSwapPoolABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof sanSwapPoolABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sanSwapPoolABI}__ and `eventName` set to `"Burn"`.
 */
export function useSanSwapPoolBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof sanSwapPoolABI, 'Burn'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sanSwapPoolABI,
    eventName: 'Burn',
    ...config,
  } as UseContractEventConfig<typeof sanSwapPoolABI, 'Burn'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sanSwapPoolABI}__ and `eventName` set to `"Mint"`.
 */
export function useSanSwapPoolMintEvent(
  config: Omit<
    UseContractEventConfig<typeof sanSwapPoolABI, 'Mint'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sanSwapPoolABI,
    eventName: 'Mint',
    ...config,
  } as UseContractEventConfig<typeof sanSwapPoolABI, 'Mint'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sanSwapPoolABI}__ and `eventName` set to `"Swap"`.
 */
export function useSanSwapPoolSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof sanSwapPoolABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sanSwapPoolABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof sanSwapPoolABI, 'Swap'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sanSwapPoolABI}__ and `eventName` set to `"Transfer"`.
 */
export function useSanSwapPoolTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof sanSwapPoolABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sanSwapPoolABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof sanSwapPoolABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sanSwapRouterABI}__.
 *
 *
 */
export function useSanSwapRouter(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof sanSwapRouterAddress;
  } = {} as any
) {
  return useContract({ abi: sanSwapRouterABI, address: sanSwapRouterAddress[31337], ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapRouterABI}__.
 *
 *
 */
export function useSanSwapRouterRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof sanSwapRouterABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof sanSwapRouterAddress;
  } = {} as any
) {
  return useContractRead({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof sanSwapRouterABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"factory"`.
 *
 *
 */
export function useSanSwapRouterFactory(
  config: Omit<
    UseContractReadConfig<typeof sanSwapRouterABI, 'factory'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapRouterAddress } = {} as any
) {
  return useContractRead({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof sanSwapRouterABI, 'factory'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"getOneForOneAmountOut"`.
 *
 *
 */
export function useSanSwapRouterGetOneForOneAmountOut(
  config: Omit<
    UseContractReadConfig<typeof sanSwapRouterABI, 'getOneForOneAmountOut'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapRouterAddress } = {} as any
) {
  return useContractRead({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'getOneForOneAmountOut',
    ...config,
  } as UseContractReadConfig<typeof sanSwapRouterABI, 'getOneForOneAmountOut'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"getOneForTwoAmountOut"`.
 *
 *
 */
export function useSanSwapRouterGetOneForTwoAmountOut(
  config: Omit<
    UseContractReadConfig<typeof sanSwapRouterABI, 'getOneForTwoAmountOut'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapRouterAddress } = {} as any
) {
  return useContractRead({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'getOneForTwoAmountOut',
    ...config,
  } as UseContractReadConfig<typeof sanSwapRouterABI, 'getOneForTwoAmountOut'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"getTwoForOneAmountOut"`.
 *
 *
 */
export function useSanSwapRouterGetTwoForOneAmountOut(
  config: Omit<
    UseContractReadConfig<typeof sanSwapRouterABI, 'getTwoForOneAmountOut'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapRouterAddress } = {} as any
) {
  return useContractRead({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'getTwoForOneAmountOut',
    ...config,
  } as UseContractReadConfig<typeof sanSwapRouterABI, 'getTwoForOneAmountOut'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__.
 *
 *
 */
export function useSanSwapRouterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof sanSwapRouterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapRouterABI, string>['abi'],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof sanSwapRouterABI, TFunctionName> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapRouterABI, TFunctionName>({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"addLiquidity"`.
 *
 *
 */
export function useSanSwapRouterAddLiquidity<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof sanSwapRouterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapRouterABI, 'addLiquidity'>['abi'],
        'addLiquidity'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addLiquidity' }
    : UseContractWriteConfig<TMode, typeof sanSwapRouterABI, 'addLiquidity'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'addLiquidity';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapRouterABI, 'addLiquidity'>({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'addLiquidity',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"removeLiquidity"`.
 *
 *
 */
export function useSanSwapRouterRemoveLiquidity<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof sanSwapRouterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapRouterABI, 'removeLiquidity'>['abi'],
        'removeLiquidity'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'removeLiquidity' }
    : UseContractWriteConfig<TMode, typeof sanSwapRouterABI, 'removeLiquidity'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'removeLiquidity';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapRouterABI, 'removeLiquidity'>({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'removeLiquidity',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"swap"`.
 *
 *
 */
export function useSanSwapRouterSwap<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof sanSwapRouterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapRouterABI, 'swap'>['abi'],
        'swap'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof sanSwapRouterABI, 'swap'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'swap';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapRouterABI, 'swap'>({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'swap',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"swapOneForOne"`.
 *
 *
 */
export function useSanSwapRouterSwapOneForOne<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof sanSwapRouterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapRouterABI, 'swapOneForOne'>['abi'],
        'swapOneForOne'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'swapOneForOne' }
    : UseContractWriteConfig<TMode, typeof sanSwapRouterABI, 'swapOneForOne'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'swapOneForOne';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapRouterABI, 'swapOneForOne'>({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'swapOneForOne',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"swapOneForTwo"`.
 *
 *
 */
export function useSanSwapRouterSwapOneForTwo<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof sanSwapRouterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapRouterABI, 'swapOneForTwo'>['abi'],
        'swapOneForTwo'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'swapOneForTwo' }
    : UseContractWriteConfig<TMode, typeof sanSwapRouterABI, 'swapOneForTwo'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'swapOneForTwo';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapRouterABI, 'swapOneForTwo'>({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'swapOneForTwo',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"swapTwoForOne"`.
 *
 *
 */
export function useSanSwapRouterSwapTwoForOne<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof sanSwapRouterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sanSwapRouterABI, 'swapTwoForOne'>['abi'],
        'swapTwoForOne'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'swapTwoForOne' }
    : UseContractWriteConfig<TMode, typeof sanSwapRouterABI, 'swapTwoForOne'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'swapTwoForOne';
      } = {} as any
) {
  return useContractWrite<TMode, typeof sanSwapRouterABI, 'swapTwoForOne'>({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'swapTwoForOne',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__.
 *
 *
 */
export function usePrepareSanSwapRouterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapRouterABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof sanSwapRouterAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapRouterABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"addLiquidity"`.
 *
 *
 */
export function usePrepareSanSwapRouterAddLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'addLiquidity'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapRouterAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'addLiquidity',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'addLiquidity'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"removeLiquidity"`.
 *
 *
 */
export function usePrepareSanSwapRouterRemoveLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'removeLiquidity'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapRouterAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'removeLiquidity',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'removeLiquidity'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"swap"`.
 *
 *
 */
export function usePrepareSanSwapRouterSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'swap'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapRouterAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'swap'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"swapOneForOne"`.
 *
 *
 */
export function usePrepareSanSwapRouterSwapOneForOne(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'swapOneForOne'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapRouterAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'swapOneForOne',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'swapOneForOne'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"swapOneForTwo"`.
 *
 *
 */
export function usePrepareSanSwapRouterSwapOneForTwo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'swapOneForTwo'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapRouterAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'swapOneForTwo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'swapOneForTwo'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sanSwapRouterABI}__ and `functionName` set to `"swapTwoForOne"`.
 *
 *
 */
export function usePrepareSanSwapRouterSwapTwoForOne(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'swapTwoForOne'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof sanSwapRouterAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: sanSwapRouterABI,
    address: sanSwapRouterAddress[31337],
    functionName: 'swapTwoForOne',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sanSwapRouterABI, 'swapTwoForOne'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, 'owner'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({
    abi: ownableABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never;
        functionName?: 'renounceOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never;
        functionName?: 'transferOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<
    typeof ownableABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'name'>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'symbol'>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never;
        functionName?: 'decreaseAllowance';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never;
        functionName?: 'increaseAllowance';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc20ABI, ...config } as UseContractEventConfig<
    typeof erc20ABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'allowance'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'balanceOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'totalSupply'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, TFunctionName>({
    abi: ierc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'approve'>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transfer'>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transferFrom'>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20ABI, ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20Metadata(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20MetadataABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ierc20MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'allowance'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'decimals'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'decimals'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'symbol'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply'>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, TFunctionName>({
    abi: ierc20MetadataABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'approve'>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transfer'>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transferFrom'>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc20MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>);
}
